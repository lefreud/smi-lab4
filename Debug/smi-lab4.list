
smi-lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000950  08000950  00010950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000954  08000954  00010954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0001095c  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001095c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000010e3  00000000  00000000  0001098c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000049c  00000000  00000000  00011a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000140  00000000  00000000  00011f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00012050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000009d4  00000000  00000000  00012148  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000062f  00000000  00000000  00012b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001314b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000354  00000000  00000000  000131c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001351c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000938 	.word	0x08000938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000938 	.word	0x08000938

080001c8 <initEEPROM>:
static void endSPIcommunication();
static int transmitWord(unsigned int byte);
static unsigned int receiveWord();

void initEEPROM()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	/*
	 * Configure SPI
	 */

	// clocks
	RCC->AHB1ENR |= BIT0 | BIT1; // Enable port A, B
 80001ce:	4a27      	ldr	r2, [pc, #156]	; (800026c <initEEPROM+0xa4>)
 80001d0:	4b26      	ldr	r3, [pc, #152]	; (800026c <initEEPROM+0xa4>)
 80001d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d4:	f043 0303 	orr.w	r3, r3, #3
 80001d8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= BIT14; // Enable SPI2 clock
 80001da:	4a24      	ldr	r2, [pc, #144]	; (800026c <initEEPROM+0xa4>)
 80001dc:	4b23      	ldr	r3, [pc, #140]	; (800026c <initEEPROM+0xa4>)
 80001de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001e4:	6413      	str	r3, [r2, #64]	; 0x40

	// GPIO output for slave select on PA1
	GPIOA->MODER |= BIT2;
 80001e6:	4a22      	ldr	r2, [pc, #136]	; (8000270 <initEEPROM+0xa8>)
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <initEEPROM+0xa8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f043 0304 	orr.w	r3, r3, #4
 80001f0:	6013      	str	r3, [r2, #0]

	// SPI-specific config

	SPI2->CR2 |= BIT2; // SS output enabled
 80001f2:	4a20      	ldr	r2, [pc, #128]	; (8000274 <initEEPROM+0xac>)
 80001f4:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <initEEPROM+0xac>)
 80001f6:	889b      	ldrh	r3, [r3, #4]
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	b29b      	uxth	r3, r3
 8000200:	8093      	strh	r3, [r2, #4]
	SPI2->CR1 |= BIT2 // Master mode
 8000202:	4a1c      	ldr	r2, [pc, #112]	; (8000274 <initEEPROM+0xac>)
 8000204:	4b1b      	ldr	r3, [pc, #108]	; (8000274 <initEEPROM+0xac>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	b29b      	uxth	r3, r3
 800020a:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800020e:	b29b      	uxth	r3, r3
 8000210:	8013      	strh	r3, [r2, #0]
			  // | BIT15 // bidimode
	          ;//| BIT9; // software slave select management
	// SPI2->CR1 |= BIT14; // bidioe


	NVIC->ISER[1] |= BIT3; // SPI global interrupt (bit 35)
 8000212:	4a19      	ldr	r2, [pc, #100]	; (8000278 <initEEPROM+0xb0>)
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <initEEPROM+0xb0>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	6053      	str	r3, [r2, #4]

	/*
	 * Set PB12, PB13, PB14, PB15 to alternate function
	 */

	GPIOB->OSPEEDR |= BIT25 | BIT27 | BIT29 | BIT31;
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <initEEPROM+0xb4>)
 8000220:	4b16      	ldr	r3, [pc, #88]	; (800027c <initEEPROM+0xb4>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 8000228:	6093      	str	r3, [r2, #8]

	// Mode alternate function
	GPIOB->MODER |= GPIO_ALTERNATE_FUNCTION << 24 |
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <initEEPROM+0xb4>)
 800022c:	4b13      	ldr	r3, [pc, #76]	; (800027c <initEEPROM+0xb4>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 8000234:	6013      	str	r3, [r2, #0]
					GPIO_ALTERNATE_FUNCTION << 26 |
					GPIO_ALTERNATE_FUNCTION << 28 |
					GPIO_ALTERNATE_FUNCTION << 30;

	GPIOB->AFR[1] |= SPI_ALTERNATE_FUNCTION << 16 |
 8000236:	4a11      	ldr	r2, [pc, #68]	; (800027c <initEEPROM+0xb4>)
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <initEEPROM+0xb4>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000240:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000244:	6253      	str	r3, [r2, #36]	; 0x24
	/*
	 * Start SPI master
	 */

	// Slave select disabled
	GPIOA->ODR |= SS_PIN;
 8000246:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <initEEPROM+0xa8>)
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <initEEPROM+0xa8>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	6153      	str	r3, [r2, #20]

	// TODO
	while (1) {
		ReadStatusRegister();
 8000252:	f000 f97f 	bl	8000554 <ReadStatusRegister>
		for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e002      	b.n	8000262 <initEEPROM+0x9a>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000268:	dbf8      	blt.n	800025c <initEEPROM+0x94>
		ReadStatusRegister();
 800026a:	e7f2      	b.n	8000252 <initEEPROM+0x8a>
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000
 8000274:	40003800 	.word	0x40003800
 8000278:	e000e100 	.word	0xe000e100
 800027c:	40020400 	.word	0x40020400

08000280 <LireMemoireEEPROM>:
	}
}

char LireMemoireEEPROM (unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Destination)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	// TODO: validate addr
	while (IsWriteInProgress());
 800028c:	bf00      	nop
 800028e:	f000 f976 	bl	800057e <IsWriteInProgress>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1fa      	bne.n	800028e <LireMemoireEEPROM+0xe>

	for (unsigned int i = 0; i < NbreOctets; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
 800029c:	e06e      	b.n	800037c <LireMemoireEEPROM+0xfc>
		GPIOA->ODR &= ~SS_PIN;
 800029e:	4a3c      	ldr	r2, [pc, #240]	; (8000390 <LireMemoireEEPROM+0x110>)
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <LireMemoireEEPROM+0x110>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f023 0302 	bic.w	r3, r3, #2
 80002a8:	6153      	str	r3, [r2, #20]

		// send READ instruction
		while ((SPI2->SR & TXE_FLAG) == 0);
 80002aa:	bf00      	nop
 80002ac:	4b39      	ldr	r3, [pc, #228]	; (8000394 <LireMemoireEEPROM+0x114>)
 80002ae:	891b      	ldrh	r3, [r3, #8]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	f003 0302 	and.w	r3, r3, #2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f8      	beq.n	80002ac <LireMemoireEEPROM+0x2c>
		SPI2->DR = 0b00000011;
 80002ba:	4b36      	ldr	r3, [pc, #216]	; (8000394 <LireMemoireEEPROM+0x114>)
 80002bc:	2203      	movs	r2, #3
 80002be:	819a      	strh	r2, [r3, #12]

		// send 8 MSB address bits
		while ((SPI2->SR & TXE_FLAG) == 0);
 80002c0:	bf00      	nop
 80002c2:	4b34      	ldr	r3, [pc, #208]	; (8000394 <LireMemoireEEPROM+0x114>)
 80002c4:	891b      	ldrh	r3, [r3, #8]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f8      	beq.n	80002c2 <LireMemoireEEPROM+0x42>
		SPI2->DR = (AdresseEEPROM + i) & 0xFF00;
 80002d0:	4930      	ldr	r1, [pc, #192]	; (8000394 <LireMemoireEEPROM+0x114>)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	4413      	add	r3, r2
 80002dc:	b29b      	uxth	r3, r3
 80002de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	818b      	strh	r3, [r1, #12]

		// send 8 LSB address bits
		while ((SPI2->SR & TXE_FLAG) == 0);
 80002e6:	bf00      	nop
 80002e8:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <LireMemoireEEPROM+0x114>)
 80002ea:	891b      	ldrh	r3, [r3, #8]
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <LireMemoireEEPROM+0x68>
		SPI2->DR = (AdresseEEPROM + i) & 0xFF;
 80002f6:	4927      	ldr	r1, [pc, #156]	; (8000394 <LireMemoireEEPROM+0x114>)
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	4413      	add	r3, r2
 8000302:	b29b      	uxth	r3, r3
 8000304:	b2db      	uxtb	r3, r3
 8000306:	b29b      	uxth	r3, r3
 8000308:	818b      	strh	r3, [r1, #12]

		// TODO
		for (volatile int i = 0; i < 1000; i++);
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	e002      	b.n	8000316 <LireMemoireEEPROM+0x96>
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	3301      	adds	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800031c:	dbf8      	blt.n	8000310 <LireMemoireEEPROM+0x90>

		// read data
		while ((SPI2->SR & RXNE_FLAG) == 0);
 800031e:	bf00      	nop
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <LireMemoireEEPROM+0x114>)
 8000322:	891b      	ldrh	r3, [r3, #8]
 8000324:	b29b      	uxth	r3, r3
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f8      	beq.n	8000320 <LireMemoireEEPROM+0xa0>
		volatile unsigned int a = SPI2->DR;
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <LireMemoireEEPROM+0x114>)
 8000330:	899b      	ldrh	r3, [r3, #12]
 8000332:	b29b      	uxth	r3, r3
 8000334:	61bb      	str	r3, [r7, #24]
		Destination[i] = SPI2->DR;
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	4413      	add	r3, r2
 800033c:	4a15      	ldr	r2, [pc, #84]	; (8000394 <LireMemoireEEPROM+0x114>)
 800033e:	8992      	ldrh	r2, [r2, #12]
 8000340:	b292      	uxth	r2, r2
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	701a      	strb	r2, [r3, #0]

		while ((SPI2->SR & BSY_FLAG) != 0);
 8000346:	bf00      	nop
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <LireMemoireEEPROM+0x114>)
 800034a:	891b      	ldrh	r3, [r3, #8]
 800034c:	b29b      	uxth	r3, r3
 800034e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000352:	2b00      	cmp	r3, #0
 8000354:	d1f8      	bne.n	8000348 <LireMemoireEEPROM+0xc8>

		// Slave select disabled
		GPIOA->ODR |= SS_PIN;
 8000356:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <LireMemoireEEPROM+0x110>)
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <LireMemoireEEPROM+0x110>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f043 0302 	orr.w	r3, r3, #2
 8000360:	6153      	str	r3, [r2, #20]
		for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
 8000366:	e002      	b.n	800036e <LireMemoireEEPROM+0xee>
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	3301      	adds	r3, #1
 800036c:	613b      	str	r3, [r7, #16]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000374:	dbf8      	blt.n	8000368 <LireMemoireEEPROM+0xe8>
	for (unsigned int i = 0; i < NbreOctets; i++) {
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3301      	adds	r3, #1
 800037a:	61fb      	str	r3, [r7, #28]
 800037c:	69fa      	ldr	r2, [r7, #28]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	429a      	cmp	r2, r3
 8000382:	d38c      	bcc.n	800029e <LireMemoireEEPROM+0x1e>
	}


	return 0; // TODO: check for failures
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40003800 	.word	0x40003800

08000398 <EcrireMemoireEEPROM>:

char EcrireMemoireEEPROM (unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Source)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
	// TODO: validate addr
	// TODO: use DMA for faster/less cumbersome data transfers?

	// TODO: MAKE SURE ADRESS IS ALIGNED AT PAGE, OR SPLIT IN MULTIPLE PAGES
	// -> call EcrirePageEEPROM for each page
	unsigned char toWrite[] = {
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <EcrireMemoireEEPROM+0x2c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	617b      	str	r3, [r7, #20]
			0, 1, 2, 3
	};
	EcrirePageEEPROM(0x0000, 4, toWrite);
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	461a      	mov	r2, r3
 80003b0:	2104      	movs	r1, #4
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 f808 	bl	80003c8 <EcrirePageEEPROM>

	return 0; // TODO: check for failures
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	08000950 	.word	0x08000950

080003c8 <EcrirePageEEPROM>:
 *
 * The bytes can start anywhere in the page but must not overflow
 * into the next page.
 */
static void EcrirePageEEPROM(unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Source)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
	while (IsWriteInProgress());
 80003d4:	bf00      	nop
 80003d6:	f000 f8d2 	bl	800057e <IsWriteInProgress>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1fa      	bne.n	80003d6 <EcrirePageEEPROM+0xe>

	/*
	 * WRITE ENABLE
	 */

	GPIOA->ODR &= ~SS_PIN;
 80003e0:	4a5a      	ldr	r2, [pc, #360]	; (800054c <EcrirePageEEPROM+0x184>)
 80003e2:	4b5a      	ldr	r3, [pc, #360]	; (800054c <EcrirePageEEPROM+0x184>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f023 0302 	bic.w	r3, r3, #2
 80003ea:	6153      	str	r3, [r2, #20]

	while ((SPI2->SR & TXE_FLAG) == 0);
 80003ec:	bf00      	nop
 80003ee:	4b58      	ldr	r3, [pc, #352]	; (8000550 <EcrirePageEEPROM+0x188>)
 80003f0:	891b      	ldrh	r3, [r3, #8]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	f003 0302 	and.w	r3, r3, #2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f8      	beq.n	80003ee <EcrirePageEEPROM+0x26>
	SPI2->DR = 0b00000110;
 80003fc:	4b54      	ldr	r3, [pc, #336]	; (8000550 <EcrirePageEEPROM+0x188>)
 80003fe:	2206      	movs	r2, #6
 8000400:	819a      	strh	r2, [r3, #12]
	while ((SPI2->SR & BSY_FLAG) != 0);
 8000402:	bf00      	nop
 8000404:	4b52      	ldr	r3, [pc, #328]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000406:	891b      	ldrh	r3, [r3, #8]
 8000408:	b29b      	uxth	r3, r3
 800040a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f8      	bne.n	8000404 <EcrirePageEEPROM+0x3c>

	GPIOA->ODR |= SS_PIN;
 8000412:	4a4e      	ldr	r2, [pc, #312]	; (800054c <EcrirePageEEPROM+0x184>)
 8000414:	4b4d      	ldr	r3, [pc, #308]	; (800054c <EcrirePageEEPROM+0x184>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f043 0302 	orr.w	r3, r3, #2
 800041c:	6153      	str	r3, [r2, #20]
	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
 8000422:	e002      	b.n	800042a <EcrirePageEEPROM+0x62>
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	3301      	adds	r3, #1
 8000428:	61bb      	str	r3, [r7, #24]
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000430:	dbf8      	blt.n	8000424 <EcrirePageEEPROM+0x5c>

	/*
	 * START TX
	 */

	GPIOA->ODR &= ~SS_PIN;
 8000432:	4a46      	ldr	r2, [pc, #280]	; (800054c <EcrirePageEEPROM+0x184>)
 8000434:	4b45      	ldr	r3, [pc, #276]	; (800054c <EcrirePageEEPROM+0x184>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f023 0302 	bic.w	r3, r3, #2
 800043c:	6153      	str	r3, [r2, #20]

	// send WRITE instruction
	while ((SPI2->SR & TXE_FLAG) == 0);
 800043e:	bf00      	nop
 8000440:	4b43      	ldr	r3, [pc, #268]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000442:	891b      	ldrh	r3, [r3, #8]
 8000444:	b29b      	uxth	r3, r3
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f8      	beq.n	8000440 <EcrirePageEEPROM+0x78>
	SPI2->DR = 0b00000010;
 800044e:	4b40      	ldr	r3, [pc, #256]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000450:	2202      	movs	r2, #2
 8000452:	819a      	strh	r2, [r3, #12]

	// send 8 MSB address bits
	while ((SPI2->SR & TXE_FLAG) == 0);
 8000454:	bf00      	nop
 8000456:	4b3e      	ldr	r3, [pc, #248]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000458:	891b      	ldrh	r3, [r3, #8]
 800045a:	b29b      	uxth	r3, r3
 800045c:	f003 0302 	and.w	r3, r3, #2
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f8      	beq.n	8000456 <EcrirePageEEPROM+0x8e>
	SPI2->DR = AdresseEEPROM & 0xFF00;
 8000464:	4a3a      	ldr	r2, [pc, #232]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	b29b      	uxth	r3, r3
 800046a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800046e:	b29b      	uxth	r3, r3
 8000470:	8193      	strh	r3, [r2, #12]

	// send 8 LSB address bits
	while ((SPI2->SR & TXE_FLAG) == 0);
 8000472:	bf00      	nop
 8000474:	4b36      	ldr	r3, [pc, #216]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000476:	891b      	ldrh	r3, [r3, #8]
 8000478:	b29b      	uxth	r3, r3
 800047a:	f003 0302 	and.w	r3, r3, #2
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f8      	beq.n	8000474 <EcrirePageEEPROM+0xac>
	SPI2->DR = AdresseEEPROM & 0xFF;
 8000482:	4b33      	ldr	r3, [pc, #204]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	b292      	uxth	r2, r2
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	b292      	uxth	r2, r2
 800048c:	819a      	strh	r2, [r3, #12]

	// send data
	for (int i = 0; i < NbreOctets; i++) {
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
 8000492:	e011      	b.n	80004b8 <EcrirePageEEPROM+0xf0>
		while ((SPI2->SR & TXE_FLAG) == 0);
 8000494:	bf00      	nop
 8000496:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000498:	891b      	ldrh	r3, [r3, #8]
 800049a:	b29b      	uxth	r3, r3
 800049c:	f003 0302 	and.w	r3, r3, #2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f8      	beq.n	8000496 <EcrirePageEEPROM+0xce>
		SPI2->DR = Source[i];
 80004a4:	492a      	ldr	r1, [pc, #168]	; (8000550 <EcrirePageEEPROM+0x188>)
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	818b      	strh	r3, [r1, #12]
	for (int i = 0; i < NbreOctets; i++) {
 80004b2:	69fb      	ldr	r3, [r7, #28]
 80004b4:	3301      	adds	r3, #1
 80004b6:	61fb      	str	r3, [r7, #28]
 80004b8:	69fa      	ldr	r2, [r7, #28]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d3e9      	bcc.n	8000494 <EcrirePageEEPROM+0xcc>
	}
	while ((SPI2->SR & BSY_FLAG) != 0);
 80004c0:	bf00      	nop
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <EcrirePageEEPROM+0x188>)
 80004c4:	891b      	ldrh	r3, [r3, #8]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1f8      	bne.n	80004c2 <EcrirePageEEPROM+0xfa>
	GPIOA->ODR |= SS_PIN;
 80004d0:	4a1e      	ldr	r2, [pc, #120]	; (800054c <EcrirePageEEPROM+0x184>)
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <EcrirePageEEPROM+0x184>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	6153      	str	r3, [r2, #20]
	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	e002      	b.n	80004e8 <EcrirePageEEPROM+0x120>
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ee:	dbf8      	blt.n	80004e2 <EcrirePageEEPROM+0x11a>

	/*
	 * WRITE DISABLE
	 */

	GPIOA->ODR &= ~SS_PIN;
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <EcrirePageEEPROM+0x184>)
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <EcrirePageEEPROM+0x184>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f023 0302 	bic.w	r3, r3, #2
 80004fa:	6153      	str	r3, [r2, #20]

	while ((SPI2->SR & TXE_FLAG) == 0);
 80004fc:	bf00      	nop
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000500:	891b      	ldrh	r3, [r3, #8]
 8000502:	b29b      	uxth	r3, r3
 8000504:	f003 0302 	and.w	r3, r3, #2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f8      	beq.n	80004fe <EcrirePageEEPROM+0x136>
	SPI2->DR = 0b00000100;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <EcrirePageEEPROM+0x188>)
 800050e:	2204      	movs	r2, #4
 8000510:	819a      	strh	r2, [r3, #12]
	while ((SPI2->SR & BSY_FLAG) != 0);
 8000512:	bf00      	nop
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <EcrirePageEEPROM+0x188>)
 8000516:	891b      	ldrh	r3, [r3, #8]
 8000518:	b29b      	uxth	r3, r3
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1f8      	bne.n	8000514 <EcrirePageEEPROM+0x14c>

	// Slave select disabled
	GPIOA->ODR |= SS_PIN;
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <EcrirePageEEPROM+0x184>)
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <EcrirePageEEPROM+0x184>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	6153      	str	r3, [r2, #20]
	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	e002      	b.n	800053a <EcrirePageEEPROM+0x172>
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	3301      	adds	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000540:	dbf8      	blt.n	8000534 <EcrirePageEEPROM+0x16c>
}
 8000542:	bf00      	nop
 8000544:	3720      	adds	r7, #32
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40020000 	.word	0x40020000
 8000550:	40003800 	.word	0x40003800

08000554 <ReadStatusRegister>:

static unsigned int ReadStatusRegister()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	startSPIcommunication();
 800055a:	f000 f845 	bl	80005e8 <startSPIcommunication>
	transmitWord(0b00000101);
 800055e:	2005      	movs	r0, #5
 8000560:	f000 f816 	bl	8000590 <transmitWord>
	transmitWord(0xFF);
 8000564:	20ff      	movs	r0, #255	; 0xff
 8000566:	f000 f813 	bl	8000590 <transmitWord>

	unsigned int statusRegisterValue = receiveWord();
 800056a:	f000 f885 	bl	8000678 <receiveWord>
 800056e:	6078      	str	r0, [r7, #4]

	endSPIcommunication();
 8000570:	f000 f854 	bl	800061c <endSPIcommunication>

	return statusRegisterValue;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <IsWriteInProgress>:

static int IsWriteInProgress()
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
	return ReadStatusRegister() & BIT0;
 8000582:	f7ff ffe7 	bl	8000554 <ReadStatusRegister>
 8000586:	4603      	mov	r3, r0
 8000588:	f003 0301 	and.w	r3, r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	bd80      	pop	{r7, pc}

08000590 <transmitWord>:

inline static int transmitWord(unsigned int byte)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	while (!(SPI2->SR & TXE_FLAG)) {}
 8000598:	bf00      	nop
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <transmitWord+0x54>)
 800059c:	891b      	ldrh	r3, [r3, #8]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f8      	beq.n	800059a <transmitWord+0xa>
	SPI2->DR = 0xFF & byte;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <transmitWord+0x54>)
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	b292      	uxth	r2, r2
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	b292      	uxth	r2, r2
 80005b2:	819a      	strh	r2, [r3, #12]
	while (!(SPI2->SR & TXE_FLAG)) {}
 80005b4:	bf00      	nop
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <transmitWord+0x54>)
 80005b8:	891b      	ldrh	r3, [r3, #8]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f8      	beq.n	80005b6 <transmitWord+0x26>
	while (!(SPI2->SR & RXNE_FLAG)) {}
 80005c4:	bf00      	nop
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <transmitWord+0x54>)
 80005c8:	891b      	ldrh	r3, [r3, #8]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f8      	beq.n	80005c6 <transmitWord+0x36>
}
 80005d4:	bf00      	nop
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40003800 	.word	0x40003800

080005e8 <startSPIcommunication>:

inline static void startSPIcommunication()
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	SPI2->CR1 |= BIT6; // SPI enabled
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <startSPIcommunication+0x2c>)
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <startSPIcommunication+0x2c>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	8013      	strh	r3, [r2, #0]
	GPIOA->ODR &= ~SS_PIN;
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <startSPIcommunication+0x30>)
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <startSPIcommunication+0x30>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	6153      	str	r3, [r2, #20]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40003800 	.word	0x40003800
 8000618:	40020000 	.word	0x40020000

0800061c <endSPIcommunication>:

inline static void endSPIcommunication()
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	while ((SPI2->SR & BSY_FLAG)) {}
 8000622:	bf00      	nop
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <endSPIcommunication+0x54>)
 8000626:	891b      	ldrh	r3, [r3, #8]
 8000628:	b29b      	uxth	r3, r3
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f8      	bne.n	8000624 <endSPIcommunication+0x8>

	SPI2->CR1 &= ~BIT6; // SPI disabled
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <endSPIcommunication+0x54>)
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <endSPIcommunication+0x54>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
 800063a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800063e:	b29b      	uxth	r3, r3
 8000640:	8013      	strh	r3, [r2, #0]
	GPIOA->ODR |= SS_PIN;
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <endSPIcommunication+0x58>)
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <endSPIcommunication+0x58>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6153      	str	r3, [r2, #20]

	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e002      	b.n	800065a <endSPIcommunication+0x3e>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000660:	dbf8      	blt.n	8000654 <endSPIcommunication+0x38>
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40003800 	.word	0x40003800
 8000674:	40020000 	.word	0x40020000

08000678 <receiveWord>:

inline static unsigned int receiveWord()
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	return SPI2->DR;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <receiveWord+0x14>)
 800067e:	899b      	ldrh	r3, [r3, #12]
 8000680:	b29b      	uxth	r3, r3
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40003800 	.word	0x40003800

08000690 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
  unsigned char buffer[10] = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	811a      	strh	r2, [r3, #8]
  initEEPROM();
 80006a0:	f7ff fd92 	bl	80001c8 <initEEPROM>

  while (1) {

	  LireMemoireEEPROM(0x0000, 4, buffer);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	461a      	mov	r2, r3
 80006a8:	2104      	movs	r1, #4
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff fde8 	bl	8000280 <LireMemoireEEPROM>
	  EcrireMemoireEEPROM(0, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fe6f 	bl	8000398 <EcrireMemoireEEPROM>
	  LireMemoireEEPROM(0x0000, 4, buffer);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	461a      	mov	r2, r3
 80006be:	2104      	movs	r1, #4
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff fddd 	bl	8000280 <LireMemoireEEPROM>
	  for (volatile int i = 0; i < 1000; i++);
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	e002      	b.n	80006d2 <main+0x42>
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d8:	dbf8      	blt.n	80006cc <main+0x3c>
	  LireMemoireEEPROM(0x0000, 4, buffer);
 80006da:	e7e3      	b.n	80006a4 <main+0x14>

080006dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006e2:	e003      	b.n	80006ec <LoopCopyDataInit>

080006e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006ea:	3104      	adds	r1, #4

080006ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006f4:	d3f6      	bcc.n	80006e4 <CopyDataInit>
  ldr  r2, =_sbss
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006f8:	e002      	b.n	8000700 <LoopFillZerobss>

080006fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006fc:	f842 3b04 	str.w	r3, [r2], #4

08000700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000704:	d3f9      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000706:	f000 f841 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070a:	f000 f8f1 	bl	80008f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800070e:	f7ff ffbf 	bl	8000690 <main>
  bx  lr    
 8000712:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000718:	0800095c 	.word	0x0800095c
  ldr  r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000720:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000724:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000728:	2000001c 	.word	0x2000001c

0800072c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC_IRQHandler>

0800072e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000740:	e7fe      	b.n	8000740 <HardFault_Handler+0x4>

08000742 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000746:	e7fe      	b.n	8000746 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800074c:	e7fe      	b.n	800074c <BusFault_Handler+0x4>

0800074e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000752:	e7fe      	b.n	8000752 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <SystemInit+0x60>)
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <SystemInit+0x60>)
 8000794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800079c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <SystemInit+0x64>)
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <SystemInit+0x64>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <SystemInit+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <SystemInit+0x64>)
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <SystemInit+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <SystemInit+0x64>)
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <SystemInit+0x68>)
 80007c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <SystemInit+0x64>)
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <SystemInit+0x64>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80007da:	f000 f80d 	bl	80007f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <SystemInit+0x60>)
 80007e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e4:	609a      	str	r2, [r3, #8]
#endif
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	40023800 	.word	0x40023800
 80007f4:	24003010 	.word	0x24003010

080007f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000806:	4a36      	ldr	r2, [pc, #216]	; (80008e0 <SetSysClock+0xe8>)
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <SetSysClock+0xe8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <SetSysClock+0xe8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <SetSysClock+0x38>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800082e:	d1f0      	bne.n	8000812 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <SetSysClock+0xe8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800083c:	2301      	movs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	e001      	b.n	8000846 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d142      	bne.n	80008d2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800084c:	4a24      	ldr	r2, [pc, #144]	; (80008e0 <SetSysClock+0xe8>)
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <SetSysClock+0xe8>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <SetSysClock+0xec>)
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SetSysClock+0xec>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000862:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000864:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <SetSysClock+0xe8>)
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <SetSysClock+0xe8>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800086c:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <SetSysClock+0xe8>)
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <SetSysClock+0xe8>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000876:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <SetSysClock+0xe8>)
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <SetSysClock+0xe8>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000882:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <SetSysClock+0xe8>)
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <SetSysClock+0xf0>)
 8000888:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <SetSysClock+0xe8>)
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <SetSysClock+0xe8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000894:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000896:	bf00      	nop
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <SetSysClock+0xe8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f9      	beq.n	8000898 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <SetSysClock+0xf4>)
 80008a6:	f240 7205 	movw	r2, #1797	; 0x705
 80008aa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <SetSysClock+0xe8>)
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <SetSysClock+0xe8>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	f023 0303 	bic.w	r3, r3, #3
 80008b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <SetSysClock+0xe8>)
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <SetSysClock+0xe8>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f043 0302 	orr.w	r3, r3, #2
 80008c2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80008c4:	bf00      	nop
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SetSysClock+0xe8>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	2b08      	cmp	r3, #8
 80008d0:	d1f9      	bne.n	80008c6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000
 80008e8:	07405419 	.word	0x07405419
 80008ec:	40023c00 	.word	0x40023c00

080008f0 <__libc_init_array>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	4e0d      	ldr	r6, [pc, #52]	; (8000928 <__libc_init_array+0x38>)
 80008f4:	4c0d      	ldr	r4, [pc, #52]	; (800092c <__libc_init_array+0x3c>)
 80008f6:	1ba4      	subs	r4, r4, r6
 80008f8:	10a4      	asrs	r4, r4, #2
 80008fa:	2500      	movs	r5, #0
 80008fc:	42a5      	cmp	r5, r4
 80008fe:	d109      	bne.n	8000914 <__libc_init_array+0x24>
 8000900:	4e0b      	ldr	r6, [pc, #44]	; (8000930 <__libc_init_array+0x40>)
 8000902:	4c0c      	ldr	r4, [pc, #48]	; (8000934 <__libc_init_array+0x44>)
 8000904:	f000 f818 	bl	8000938 <_init>
 8000908:	1ba4      	subs	r4, r4, r6
 800090a:	10a4      	asrs	r4, r4, #2
 800090c:	2500      	movs	r5, #0
 800090e:	42a5      	cmp	r5, r4
 8000910:	d105      	bne.n	800091e <__libc_init_array+0x2e>
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000918:	4798      	blx	r3
 800091a:	3501      	adds	r5, #1
 800091c:	e7ee      	b.n	80008fc <__libc_init_array+0xc>
 800091e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000922:	4798      	blx	r3
 8000924:	3501      	adds	r5, #1
 8000926:	e7f2      	b.n	800090e <__libc_init_array+0x1e>
 8000928:	08000954 	.word	0x08000954
 800092c:	08000954 	.word	0x08000954
 8000930:	08000954 	.word	0x08000954
 8000934:	08000958 	.word	0x08000958

08000938 <_init>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	bf00      	nop
 800093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093e:	bc08      	pop	{r3}
 8000940:	469e      	mov	lr, r3
 8000942:	4770      	bx	lr

08000944 <_fini>:
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000946:	bf00      	nop
 8000948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094a:	bc08      	pop	{r3}
 800094c:	469e      	mov	lr, r3
 800094e:	4770      	bx	lr
