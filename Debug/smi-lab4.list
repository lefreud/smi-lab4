
smi-lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000790  08000790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000794  08000794  00010794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000798  08000798  00010798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0001079c  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001079c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001046  00000000  00000000  000107cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000497  00000000  00000000  00011812  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000140  00000000  00000000  00011cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  00011df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000943  00000000  00000000  00011ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000062f  00000000  00000000  0001282b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00012e5a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000358  00000000  00000000  00012ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00013230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000778 	.word	0x08000778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000778 	.word	0x08000778

080001c8 <initEEPROM>:
static void endSPIcommunication();
static int transmitWord(unsigned int byte);
static unsigned int receiveWord();

void initEEPROM()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/*
	 * Configure SPI
	 */

	// clocks
	RCC->AHB1ENR |= BIT0 | BIT1; // Enable port A, B
 80001cc:	4a23      	ldr	r2, [pc, #140]	; (800025c <initEEPROM+0x94>)
 80001ce:	4b23      	ldr	r3, [pc, #140]	; (800025c <initEEPROM+0x94>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0303 	orr.w	r3, r3, #3
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= BIT14; // Enable SPI2 clock
 80001d8:	4a20      	ldr	r2, [pc, #128]	; (800025c <initEEPROM+0x94>)
 80001da:	4b20      	ldr	r3, [pc, #128]	; (800025c <initEEPROM+0x94>)
 80001dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40

	// GPIO output for slave select on PA1
	GPIOA->MODER |= BIT2;
 80001e4:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <initEEPROM+0x98>)
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <initEEPROM+0x98>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6013      	str	r3, [r2, #0]

	// SPI-specific config

	SPI2->CR2 |= BIT2; // SS output enabled
 80001f0:	4a1c      	ldr	r2, [pc, #112]	; (8000264 <initEEPROM+0x9c>)
 80001f2:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <initEEPROM+0x9c>)
 80001f4:	889b      	ldrh	r3, [r3, #4]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	f043 0304 	orr.w	r3, r3, #4
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	8093      	strh	r3, [r2, #4]
	SPI2->CR1 |= BIT2 // Master mode
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <initEEPROM+0x9c>)
 8000202:	4b18      	ldr	r3, [pc, #96]	; (8000264 <initEEPROM+0x9c>)
 8000204:	881b      	ldrh	r3, [r3, #0]
 8000206:	b29b      	uxth	r3, r3
 8000208:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800020c:	b29b      	uxth	r3, r3
 800020e:	8013      	strh	r3, [r2, #0]
			  // | BIT15 // bidimode
	          ;//| BIT9; // software slave select management
	// SPI2->CR1 |= BIT14; // bidioe


	NVIC->ISER[1] |= BIT3; // SPI global interrupt (bit 35)
 8000210:	4a15      	ldr	r2, [pc, #84]	; (8000268 <initEEPROM+0xa0>)
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <initEEPROM+0xa0>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f043 0308 	orr.w	r3, r3, #8
 800021a:	6053      	str	r3, [r2, #4]

	/*
	 * Set PB12, PB13, PB14, PB15 to alternate function
	 */

	GPIOB->OSPEEDR |= BIT25 | BIT27 | BIT29 | BIT31;
 800021c:	4a13      	ldr	r2, [pc, #76]	; (800026c <initEEPROM+0xa4>)
 800021e:	4b13      	ldr	r3, [pc, #76]	; (800026c <initEEPROM+0xa4>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 8000226:	6093      	str	r3, [r2, #8]

	// Mode alternate function
	GPIOB->MODER |= GPIO_ALTERNATE_FUNCTION << 24 |
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <initEEPROM+0xa4>)
 800022a:	4b10      	ldr	r3, [pc, #64]	; (800026c <initEEPROM+0xa4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 8000232:	6013      	str	r3, [r2, #0]
					GPIO_ALTERNATE_FUNCTION << 26 |
					GPIO_ALTERNATE_FUNCTION << 28 |
					GPIO_ALTERNATE_FUNCTION << 30;

	GPIOB->AFR[1] |= SPI_ALTERNATE_FUNCTION << 16 |
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <initEEPROM+0xa4>)
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <initEEPROM+0xa4>)
 8000238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800023e:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000242:	6253      	str	r3, [r2, #36]	; 0x24
	/*
	 * Start SPI master
	 */

	// Slave select disabled
	GPIOA->ODR |= SS_PIN;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <initEEPROM+0x98>)
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <initEEPROM+0x98>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6153      	str	r3, [r2, #20]
		endSPIcommunication();*/
/*
		for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
	}
*/
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	40003800 	.word	0x40003800
 8000268:	e000e100 	.word	0xe000e100
 800026c:	40020400 	.word	0x40020400

08000270 <LireMemoireEEPROM>:

char LireMemoireEEPROM (unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Destination)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
	// TODO: validate addr
	while (IsWriteInProgress());
 800027c:	bf00      	nop
 800027e:	f000 f8a1 	bl	80003c4 <IsWriteInProgress>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1fa      	bne.n	800027e <LireMemoireEEPROM+0xe>

	for (unsigned int i = 0; i < NbreOctets; i++) {
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e027      	b.n	80002de <LireMemoireEEPROM+0x6e>
		// GPIOA->ODR &= ~SS_PIN;
		startSPIcommunication();
 800028e:	f000 f8d3 	bl	8000438 <startSPIcommunication>

		// send READ instruction
		/*while ((SPI2->SR & TXE_FLAG) == 0);
		SPI2->DR = 0b00000011;*/
		transmitWord(0b00000011);
 8000292:	2003      	movs	r0, #3
 8000294:	f000 f8a0 	bl	80003d8 <transmitWord>

		// send 8 MSB address bits
		/*while ((SPI2->SR & TXE_FLAG) == 0);
		SPI2->DR = (AdresseEEPROM + i) & 0xFF00;*/
		transmitWord((AdresseEEPROM + i) & 0xFF00);
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	4413      	add	r3, r2
 800029e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f898 	bl	80003d8 <transmitWord>

		// send 8 LSB address bits
		/*while ((SPI2->SR & TXE_FLAG) == 0);
		SPI2->DR = (AdresseEEPROM + i) & 0xFF;*/
		transmitWord((AdresseEEPROM + i) & 0xFF);
 80002a8:	68fa      	ldr	r2, [r7, #12]
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	4413      	add	r3, r2
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f891 	bl	80003d8 <transmitWord>

		transmitWord(0xFF);
 80002b6:	20ff      	movs	r0, #255	; 0xff
 80002b8:	f000 f88e 	bl	80003d8 <transmitWord>
		// for (volatile int i = 0; i < 1000; i++);

		// read data
		// while ((SPI2->SR & RXNE_FLAG) == 0);
		// volatile unsigned int a = SPI2->DR;
		volatile unsigned int x = receiveWord();
 80002bc:	f000 f90c 	bl	80004d8 <receiveWord>
 80002c0:	4603      	mov	r3, r0
 80002c2:	613b      	str	r3, [r7, #16]
		Destination[i] = receiveWord();
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	18d4      	adds	r4, r2, r3
 80002ca:	f000 f905 	bl	80004d8 <receiveWord>
 80002ce:	4603      	mov	r3, r0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	7023      	strb	r3, [r4, #0]

		// while ((SPI2->SR & BSY_FLAG) != 0);
		endSPIcommunication();
 80002d4:	f000 f8d2 	bl	800047c <endSPIcommunication>
	for (unsigned int i = 0; i < NbreOctets; i++) {
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3301      	adds	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697a      	ldr	r2, [r7, #20]
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d3d3      	bcc.n	800028e <LireMemoireEEPROM+0x1e>
		//GPIOA->ODR |= SS_PIN;
		// for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
	}


	return 0; // TODO: check for failures
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	371c      	adds	r7, #28
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd90      	pop	{r4, r7, pc}

080002f0 <EcrireMemoireEEPROM>:

char EcrireMemoireEEPROM (unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Source)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
	// TODO: validate addr
	// TODO: use DMA for faster/less cumbersome data transfers?

	// TODO: MAKE SURE ADRESS IS ALIGNED AT PAGE, OR SPLIT IN MULTIPLE PAGES
	// -> call EcrirePageEEPROM for each page
	unsigned char toWrite[] = {
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <EcrireMemoireEEPROM+0x2c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	617b      	str	r3, [r7, #20]
			0, 1, 2, 3
	};
	EcrirePageEEPROM(0x0000, 4, toWrite);
 8000302:	f107 0314 	add.w	r3, r7, #20
 8000306:	461a      	mov	r2, r3
 8000308:	2104      	movs	r1, #4
 800030a:	2000      	movs	r0, #0
 800030c:	f000 f808 	bl	8000320 <EcrirePageEEPROM>

	return 0; // TODO: check for failures
 8000310:	2300      	movs	r3, #0
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	08000790 	.word	0x08000790

08000320 <EcrirePageEEPROM>:
 *
 * The bytes can start anywhere in the page but must not overflow
 * into the next page.
 */
static void EcrirePageEEPROM(unsigned int AdresseEEPROM, unsigned int NbreOctets, unsigned char *Source)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
	while (IsWriteInProgress());
 800032c:	bf00      	nop
 800032e:	f000 f849 	bl	80003c4 <IsWriteInProgress>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1fa      	bne.n	800032e <EcrirePageEEPROM+0xe>
	/*
	 * WRITE ENABLE
	 */

	// GPIOA->ODR &= ~SS_PIN;
	startSPIcommunication();
 8000338:	f000 f87e 	bl	8000438 <startSPIcommunication>

	/* while ((SPI2->SR & TXE_FLAG) == 0);
	SPI2->DR = 0b00000110;
	while ((SPI2->SR & BSY_FLAG) != 0);*/
	transmitWord(0b00000110);
 800033c:	2006      	movs	r0, #6
 800033e:	f000 f84b 	bl	80003d8 <transmitWord>

	endSPIcommunication();
 8000342:	f000 f89b 	bl	800047c <endSPIcommunication>

	/*
	 * START TX
	 */

	startSPIcommunication();
 8000346:	f000 f877 	bl	8000438 <startSPIcommunication>
	//GPIOA->ODR &= ~SS_PIN;

	// send WRITE instruction
	/*while ((SPI2->SR & TXE_FLAG) == 0);
	SPI2->DR = 0b00000010;*/
	transmitWord(0b00000010);
 800034a:	2002      	movs	r0, #2
 800034c:	f000 f844 	bl	80003d8 <transmitWord>

	// send 8 MSB address bits
	// while ((SPI2->SR & TXE_FLAG) == 0);
	// SPI2->DR = AdresseEEPROM & 0xFF00;
	transmitWord(AdresseEEPROM & 0xFF00);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f83e 	bl	80003d8 <transmitWord>

	// send 8 LSB address bits
	/*while ((SPI2->SR & TXE_FLAG) == 0);
	SPI2->DR = AdresseEEPROM & 0xFF;*/
	transmitWord(AdresseEEPROM & 0xFF);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f839 	bl	80003d8 <transmitWord>

	// send data
	for (int i = 0; i < NbreOctets; i++) {
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e005      	b.n	8000378 <EcrirePageEEPROM+0x58>
		// while ((SPI2->SR & TXE_FLAG) == 0);
		// SPI2->DR = Source[i];
		// transmitWord(Source[i]);
		transmitWord(0x68);
 800036c:	2068      	movs	r0, #104	; 0x68
 800036e:	f000 f833 	bl	80003d8 <transmitWord>
	for (int i = 0; i < NbreOctets; i++) {
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	3301      	adds	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	429a      	cmp	r2, r3
 800037e:	d3f5      	bcc.n	800036c <EcrirePageEEPROM+0x4c>

	/*
	while ((SPI2->SR & BSY_FLAG) != 0);
	GPIOA->ODR |= SS_PIN;
	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns*/
	endSPIcommunication();
 8000380:	f000 f87c 	bl	800047c <endSPIcommunication>
	/*
	 * WRITE DISABLE
	 */

	// GPIOA->ODR &= ~SS_PIN;
	startSPIcommunication();
 8000384:	f000 f858 	bl	8000438 <startSPIcommunication>

	/*while ((SPI2->SR & TXE_FLAG) == 0);
	SPI2->DR = 0b00000100;
	while ((SPI2->SR & BSY_FLAG) != 0);*/
	transmitWord(0b00000100);
 8000388:	2004      	movs	r0, #4
 800038a:	f000 f825 	bl	80003d8 <transmitWord>

	// Slave select disabled
	/*GPIOA->ODR |= SS_PIN;
	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns*/
	endSPIcommunication();
 800038e:	f000 f875 	bl	800047c <endSPIcommunication>
}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <ReadStatusRegister>:

static unsigned int ReadStatusRegister()
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
	startSPIcommunication();
 80003a0:	f000 f84a 	bl	8000438 <startSPIcommunication>
	transmitWord(0b00000101);
 80003a4:	2005      	movs	r0, #5
 80003a6:	f000 f817 	bl	80003d8 <transmitWord>
	transmitWord(0xFF);
 80003aa:	20ff      	movs	r0, #255	; 0xff
 80003ac:	f000 f814 	bl	80003d8 <transmitWord>

	unsigned int statusRegisterValue = receiveWord();
 80003b0:	f000 f892 	bl	80004d8 <receiveWord>
 80003b4:	6078      	str	r0, [r7, #4]

	endSPIcommunication();
 80003b6:	f000 f861 	bl	800047c <endSPIcommunication>

	return statusRegisterValue;
 80003ba:	687b      	ldr	r3, [r7, #4]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <IsWriteInProgress>:

static int IsWriteInProgress()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	return ReadStatusRegister() & BIT0;
 80003c8:	f7ff ffe7 	bl	800039a <ReadStatusRegister>
 80003cc:	4603      	mov	r3, r0
 80003ce:	f003 0301 	and.w	r3, r3, #1
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <transmitWord>:

inline static int transmitWord(unsigned int byte)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	while (!(SPI2->SR & TXE_FLAG)) {}
 80003e0:	bf00      	nop
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <transmitWord+0x5c>)
 80003e4:	891b      	ldrh	r3, [r3, #8]
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	f003 0302 	and.w	r3, r3, #2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f8      	beq.n	80003e2 <transmitWord+0xa>
	SPI2->DR = 0xFF & byte;
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <transmitWord+0x5c>)
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	b292      	uxth	r2, r2
 80003f6:	b2d2      	uxtb	r2, r2
 80003f8:	b292      	uxth	r2, r2
 80003fa:	819a      	strh	r2, [r3, #12]
	while (!(SPI2->SR & TXE_FLAG)) {}
 80003fc:	bf00      	nop
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <transmitWord+0x5c>)
 8000400:	891b      	ldrh	r3, [r3, #8]
 8000402:	b29b      	uxth	r3, r3
 8000404:	f003 0302 	and.w	r3, r3, #2
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <transmitWord+0x26>
	while (!(SPI2->SR & RXNE_FLAG)) {}
 800040c:	bf00      	nop
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <transmitWord+0x5c>)
 8000410:	891b      	ldrh	r3, [r3, #8]
 8000412:	b29b      	uxth	r3, r3
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0f8      	beq.n	800040e <transmitWord+0x36>
	volatile unsigned int x = SPI2->DR;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <transmitWord+0x5c>)
 800041e:	899b      	ldrh	r3, [r3, #12]
 8000420:	b29b      	uxth	r3, r3
 8000422:	60fb      	str	r3, [r7, #12]
}
 8000424:	bf00      	nop
 8000426:	4618      	mov	r0, r3
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40003800 	.word	0x40003800

08000438 <startSPIcommunication>:

inline static void startSPIcommunication()
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	SPI2->CR1 |= BIT6; // SPI enabled
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <startSPIcommunication+0x3c>)
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <startSPIcommunication+0x3c>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	b29b      	uxth	r3, r3
 8000444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000448:	b29b      	uxth	r3, r3
 800044a:	8013      	strh	r3, [r2, #0]
	while (!(SPI2->SR & TXE_FLAG)) {}
 800044c:	bf00      	nop
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <startSPIcommunication+0x3c>)
 8000450:	891b      	ldrh	r3, [r3, #8]
 8000452:	b29b      	uxth	r3, r3
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f8      	beq.n	800044e <startSPIcommunication+0x16>
	GPIOA->ODR &= ~SS_PIN;
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <startSPIcommunication+0x40>)
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <startSPIcommunication+0x40>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f023 0302 	bic.w	r3, r3, #2
 8000466:	6153      	str	r3, [r2, #20]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40003800 	.word	0x40003800
 8000478:	40020000 	.word	0x40020000

0800047c <endSPIcommunication>:

inline static void endSPIcommunication()
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
	while ((SPI2->SR & BSY_FLAG)) {}
 8000482:	bf00      	nop
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <endSPIcommunication+0x54>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	b29b      	uxth	r3, r3
 800048a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1f8      	bne.n	8000484 <endSPIcommunication+0x8>

	GPIOA->ODR |= SS_PIN;
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <endSPIcommunication+0x58>)
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <endSPIcommunication+0x58>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f043 0302 	orr.w	r3, r3, #2
 800049c:	6153      	str	r3, [r2, #20]

	SPI2->CR1 &= ~BIT6; // SPI disabled
 800049e:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <endSPIcommunication+0x54>)
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <endSPIcommunication+0x54>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	8013      	strh	r3, [r2, #0]

	for (volatile int i = 0; i < EEPROM_DELAY_TICKS; i++); // at least 50 ns
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e002      	b.n	80004ba <endSPIcommunication+0x3e>
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3301      	adds	r3, #1
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004c0:	dbf8      	blt.n	80004b4 <endSPIcommunication+0x38>
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40003800 	.word	0x40003800
 80004d4:	40020000 	.word	0x40020000

080004d8 <receiveWord>:

inline static unsigned int receiveWord()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	return SPI2->DR;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <receiveWord+0x14>)
 80004de:	899b      	ldrh	r3, [r3, #12]
 80004e0:	b29b      	uxth	r3, r3
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40003800 	.word	0x40003800

080004f0 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  unsigned char buffer[10] = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	811a      	strh	r2, [r3, #8]
  initEEPROM();
 8000500:	f7ff fe62 	bl	80001c8 <initEEPROM>

  while (1) {

	  EcrireMemoireEEPROM(0, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fef1 	bl	80002f0 <EcrireMemoireEEPROM>
	  LireMemoireEEPROM(0x0000, 4, buffer);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	461a      	mov	r2, r3
 8000512:	2104      	movs	r1, #4
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feab 	bl	8000270 <LireMemoireEEPROM>
	  EcrireMemoireEEPROM(0, 0, 0);
 800051a:	e7f3      	b.n	8000504 <main+0x14>

0800051c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800051c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000522:	e003      	b.n	800052c <LoopCopyDataInit>

08000524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800052a:	3104      	adds	r1, #4

0800052c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000534:	d3f6      	bcc.n	8000524 <CopyDataInit>
  ldr  r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000538:	e002      	b.n	8000540 <LoopFillZerobss>

0800053a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800053a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800053c:	f842 3b04 	str.w	r3, [r2], #4

08000540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000544:	d3f9      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000546:	f000 f841 	bl	80005cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f000 f8f1 	bl	8000730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800054e:	f7ff ffcf 	bl	80004f0 <main>
  bx  lr    
 8000552:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000554:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000558:	0800079c 	.word	0x0800079c
  ldr  r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000560:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000564:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000568:	2000001c 	.word	0x2000001c

0800056c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC_IRQHandler>

0800056e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000580:	e7fe      	b.n	8000580 <HardFault_Handler+0x4>

08000582 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000586:	e7fe      	b.n	8000586 <MemManage_Handler+0x4>

08000588 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800058c:	e7fe      	b.n	800058c <BusFault_Handler+0x4>

0800058e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000592:	e7fe      	b.n	8000592 <UsageFault_Handler+0x4>

08000594 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <SystemInit+0x60>)
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <SystemInit+0x60>)
 80005d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <SystemInit+0x64>)
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <SystemInit+0x64>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <SystemInit+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <SystemInit+0x64>)
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <SystemInit+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000600:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <SystemInit+0x64>)
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <SystemInit+0x68>)
 8000606:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000608:	4a09      	ldr	r2, [pc, #36]	; (8000630 <SystemInit+0x64>)
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <SystemInit+0x64>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000612:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <SystemInit+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800061a:	f000 f80d 	bl	8000638 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800061e:	4b03      	ldr	r3, [pc, #12]	; (800062c <SystemInit+0x60>)
 8000620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000624:	609a      	str	r2, [r3, #8]
#endif
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00
 8000630:	40023800 	.word	0x40023800
 8000634:	24003010 	.word	0x24003010

08000638 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000646:	4a36      	ldr	r2, [pc, #216]	; (8000720 <SetSysClock+0xe8>)
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <SetSysClock+0xe8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000650:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <SetSysClock+0xe8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d103      	bne.n	8000670 <SetSysClock+0x38>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800066e:	d1f0      	bne.n	8000652 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <SetSysClock+0xe8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800067c:	2301      	movs	r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	e001      	b.n	8000686 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d142      	bne.n	8000712 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <SetSysClock+0xe8>)
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SetSysClock+0xe8>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SetSysClock+0xec>)
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SetSysClock+0xec>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006a4:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <SetSysClock+0xe8>)
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <SetSysClock+0xe8>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006ac:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <SetSysClock+0xe8>)
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <SetSysClock+0xe8>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <SetSysClock+0xe8>)
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <SetSysClock+0xe8>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006c2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <SetSysClock+0xe8>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <SetSysClock+0xf0>)
 80006c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <SetSysClock+0xe8>)
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <SetSysClock+0xe8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006d4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006d6:	bf00      	nop
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <SetSysClock+0xe8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f9      	beq.n	80006d8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <SetSysClock+0xf4>)
 80006e6:	f240 7205 	movw	r2, #1797	; 0x705
 80006ea:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <SetSysClock+0xe8>)
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <SetSysClock+0xe8>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f023 0303 	bic.w	r3, r3, #3
 80006f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <SetSysClock+0xe8>)
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <SetSysClock+0xe8>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f043 0302 	orr.w	r3, r3, #2
 8000702:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000704:	bf00      	nop
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SetSysClock+0xe8>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	f003 030c 	and.w	r3, r3, #12
 800070e:	2b08      	cmp	r3, #8
 8000710:	d1f9      	bne.n	8000706 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000
 8000728:	07405419 	.word	0x07405419
 800072c:	40023c00 	.word	0x40023c00

08000730 <__libc_init_array>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	4e0d      	ldr	r6, [pc, #52]	; (8000768 <__libc_init_array+0x38>)
 8000734:	4c0d      	ldr	r4, [pc, #52]	; (800076c <__libc_init_array+0x3c>)
 8000736:	1ba4      	subs	r4, r4, r6
 8000738:	10a4      	asrs	r4, r4, #2
 800073a:	2500      	movs	r5, #0
 800073c:	42a5      	cmp	r5, r4
 800073e:	d109      	bne.n	8000754 <__libc_init_array+0x24>
 8000740:	4e0b      	ldr	r6, [pc, #44]	; (8000770 <__libc_init_array+0x40>)
 8000742:	4c0c      	ldr	r4, [pc, #48]	; (8000774 <__libc_init_array+0x44>)
 8000744:	f000 f818 	bl	8000778 <_init>
 8000748:	1ba4      	subs	r4, r4, r6
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	2500      	movs	r5, #0
 800074e:	42a5      	cmp	r5, r4
 8000750:	d105      	bne.n	800075e <__libc_init_array+0x2e>
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000758:	4798      	blx	r3
 800075a:	3501      	adds	r5, #1
 800075c:	e7ee      	b.n	800073c <__libc_init_array+0xc>
 800075e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000762:	4798      	blx	r3
 8000764:	3501      	adds	r5, #1
 8000766:	e7f2      	b.n	800074e <__libc_init_array+0x1e>
 8000768:	08000794 	.word	0x08000794
 800076c:	08000794 	.word	0x08000794
 8000770:	08000794 	.word	0x08000794
 8000774:	08000798 	.word	0x08000798

08000778 <_init>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr

08000784 <_fini>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	bf00      	nop
 8000788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078a:	bc08      	pop	{r3}
 800078c:	469e      	mov	lr, r3
 800078e:	4770      	bx	lr
